# Coding pattern preferences

- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming
- Always try to activate the current environment when executing code
- Always use the `tests/` folder and subfolders to create test related scripts. Do not create this scripts in the root.

## Dependency Management with uv

- Always use `uv add <package-name>` to add new dependencies to ensure they are tracked in `pyproject.toml`
- NEVER use `uv pip install` for packages that should be project dependencies - this doesn't update `pyproject.toml`
- Use `uv add --dev <package-name>` for development dependencies
- Use `uv sync` to ensure the environment matches `pyproject.toml`
- When adding multiple packages, use `uv add package1 package2 package3` for efficiency
- For optional dependencies, use `uv add --optional-dependencies <group> <package-name>`
- Always verify that new dependencies appear in `pyproject.toml` after adding them 

# Coding workflow preferences

- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code changes 