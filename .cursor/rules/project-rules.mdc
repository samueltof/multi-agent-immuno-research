---
alwaysApply: true
---
### üîÑ Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASKS.md`** before starting a new task. If the task isn‚Äôt listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.

These files are stored in `docs/`

### üß± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).
- **Focus on the areas of code relevant to the task**
- **Do not touch code that is unrelated to the task**
- **Always think about what other methods and areas of code might be affected by code changes**

### üß™ Testing & Reliability
- **Always create Pytest unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### ‚úÖ Task Completion
- **Mark completed tasks in `TASKS.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASKS.md` under a ‚ÄúDiscovered During Work‚Äù section.
- **Always add a new task to `TASKS.md`** when starting a new feature or bug fix.
- Use this format for new tasks:

```markdown
# Tasks
## Epic Name
- [ ] Task description
- [ ] Task description

### Sub-tasks
- [ ] Sub-task description
- [ ] Sub-task description
```

Use detailed task descriptions that are easy to understand and follow.

When you are done with a task, mark it as done by adding a `x` to the task description.

```markdown
- [x] Task description
```

**IMPORTANT:** This document is only for tasks that are related to the current sprint focus.  Do not add additional information like observations, thoughts, or other information that is not a task.

Respect the structure of the document and do not add additional information like observations, thoughts, or other information that is not a task.

### üìé Style & Conventions
- **Use Python** as the primary language.
- **Follow PEP8**, use type hints, and format with `black`.
- **Use `pydantic` for data validation**.
- Use `FastAPI` for APIs and `SQLAlchemy` or `SQLModel` for ORM if applicable.
- Write **docstrings for every function** using the Google style:
  ```python
  def example():
      """
      Brief summary.

      Args:
          param1 (type): Description.

      Returns:
          type: Description.
      """
  ```

### üìö Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Update `docs/PLANNING.md`** when new features are added and when the project architecture and scope changes .
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.
- When generating documnetation, guides, or other documentation, **use the `docs/gen/` folder** to store the documentation.

### Dependency Management with uv

- Always use `uv add <package-name>` to add new dependencies to ensure they are tracked in `pyproject.toml`
- NEVER use `uv pip install` for packages that should be project 
- Use `uv sync` to ensure the environment matches `pyproject.toml`

### üß† AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** ‚Äì only use known, verified Python packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASKS.md`.